// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-VKITI27
// DateTime: 3/21/2017 12:08:26 AM
// UserName: Juan Camilo
// Input file <parser.y - 3/21/2017 12:08:25 AM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GPLexTutorial
{
public enum Tokens {error=63,EOF=64,NUMBER=65,IDENT=66,
    FLOATLITERAL=67,STRINGLITERAL=68,BOOL=69,ABSTRACT=70,ASSERT=71,BOOLEAN=72,
    BREAK=73,BYTE=74,CASE=75,CATCH=76,CHAR=77,CLASS=78,
    CONST=79,CONTINUE=80,DEFAULT=81,DO=82,DOUBLE=83,ELSE=84,
    ENUM=85,EXTENDS=86,FINAL=87,FINALLY=88,FLOAT=89,FOR=90,
    IF=91,GOTO=92,IMPLEMENTS=93,IMPORT=94,INSTANCEOF=95,INT=96,
    INTERFACE=97,LONG=98,NATIVE=99,NEW=100,PACKAGE=101,PRIVATE=102,
    PROTECTED=103,PUBLIC=104,RETURN=105,SHORT=106,STATIC=107,STRICTFP=108,
    SUPER=109,SWITCH=110,SYNCHRONIZED=111,THIS=112,THROW=113,THROWS=114,
    TRANSIENT=115,TRY=116,VOID=117,VOLATILE=118,WHILE=119,IntegerLiteral=120,
    CharacterLiteral=121,NULL=122,OPERATOR=123,TRUE=124,FALSE=125};

public struct ValueType
#line 4 "parser.y"
{
    public int num;
    public string name;
    public float floatValue;
    public string stringValue;
    public bool boolValue;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[26];
  private static State[] states = new State[26];
  private static string[] nonTerms = new string[] {
      "CompilationUnit", "$accept", "ImportDeclarations", "TypeDeclarations", 
      "ImportDeclaration", "nothing", "SingleTypeImportDeclaration", "TypeDeclaration", 
      "ClassDeclaration", "InterfaceDeclaration", "NormalClassDeclaration", "EnumDeclaration", 
      "ClassModifiers", "ClassModifier", "TypeName", "PackageOrTypeName", };

  static Parser() {
    states[0] = new State(new int[]{94,18,78,-25,64,-25},new int[]{-1,1,-3,3,-5,15,-7,17,-6,25});
    states[1] = new State(new int[]{64,2});
    states[2] = new State(-1);
    states[3] = new State(-25,new int[]{-4,4,-8,5,-9,7,-11,8,-13,9,-14,11,-6,12,-12,13,-10,14});
    states[4] = new State(-2);
    states[5] = new State(new int[]{64,-7,78,-25},new int[]{-4,6,-8,5,-9,7,-11,8,-13,9,-14,11,-6,12,-12,13,-10,14});
    states[6] = new State(-8);
    states[7] = new State(-10);
    states[8] = new State(-12);
    states[9] = new State(new int[]{78,10});
    states[10] = new State(-14);
    states[11] = new State(-15);
    states[12] = new State(new int[]{78,-16,64,-9});
    states[13] = new State(-13);
    states[14] = new State(-11);
    states[15] = new State(new int[]{94,18,78,-3,64,-3},new int[]{-3,16,-5,15,-7,17,-6,25});
    states[16] = new State(-4);
    states[17] = new State(-6);
    states[18] = new State(new int[]{66,21},new int[]{-15,19,-16,22});
    states[19] = new State(new int[]{59,20});
    states[20] = new State(-20);
    states[21] = new State(new int[]{59,-21,46,-23});
    states[22] = new State(new int[]{46,23});
    states[23] = new State(new int[]{66,24});
    states[24] = new State(new int[]{59,-22,46,-24});
    states[25] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,64});
    rules[2] = new Rule(-1, new int[]{-3,-4});
    rules[3] = new Rule(-3, new int[]{-5});
    rules[4] = new Rule(-3, new int[]{-5,-3});
    rules[5] = new Rule(-3, new int[]{-6});
    rules[6] = new Rule(-5, new int[]{-7});
    rules[7] = new Rule(-4, new int[]{-8});
    rules[8] = new Rule(-4, new int[]{-8,-4});
    rules[9] = new Rule(-4, new int[]{-6});
    rules[10] = new Rule(-8, new int[]{-9});
    rules[11] = new Rule(-8, new int[]{-10});
    rules[12] = new Rule(-9, new int[]{-11});
    rules[13] = new Rule(-9, new int[]{-12});
    rules[14] = new Rule(-11, new int[]{-13,78});
    rules[15] = new Rule(-13, new int[]{-14});
    rules[16] = new Rule(-13, new int[]{-6});
    rules[17] = new Rule(-14, new int[]{-6});
    rules[18] = new Rule(-12, new int[]{-6});
    rules[19] = new Rule(-10, new int[]{-6});
    rules[20] = new Rule(-7, new int[]{94,-15,59});
    rules[21] = new Rule(-15, new int[]{66});
    rules[22] = new Rule(-15, new int[]{-16,46,66});
    rules[23] = new Rule(-16, new int[]{66});
    rules[24] = new Rule(-16, new int[]{-16,46,66});
    rules[25] = new Rule(-6, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 77 "parser.y"

public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
