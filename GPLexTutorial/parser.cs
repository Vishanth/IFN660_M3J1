// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  VDI-VL17-002
// DateTime: 23/05/2017 2:09:52 PM
// UserName: n9523839
// Input file <parser.y - 23/05/2017 2:09:49 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using GPLexTutorial.AST;

namespace GPLexTutorial
{
public enum Tokens {
    error=127,EOF=128,NUMBER=129,IDENT=130,IntegerLiteral=131,FLOATLITERAL=132,
    STRINGLITERAL=133,BOOLEANLITERAL=134,ABSTRACT=135,ASSERT=136,BOOLEAN=137,BREAK=138,
    BYTE=139,CASE=140,CATCH=141,CHAR=142,CLASS=143,CONST=144,
    CONTINUE=145,DEFAULT=146,DO=147,DOUBLE=148,ELSE=149,ENUM=150,
    EXTENDS=151,FINAL=152,FINALLY=153,FLOAT=154,FOR=155,IF=156,
    GOTO=157,IMPLEMENTS=158,IMPORT=159,INSTANCEOF=160,INT=161,INTERFACE=162,
    LONG=163,NATIVE=164,NEW=165,PACKAGE=166,PRIVATE=167,PROTECTED=168,
    PUBLIC=169,RETURN=170,SHORT=171,STATIC=172,STRICTFP=173,SUPER=174,
    SWITCH=175,SYNCHRONIZED=176,THIS=177,THROW=178,THROWS=179,TRANSIENT=180,
    TRY=181,VOID=182,VOLATILE=183,WHILE=184,CharacterLiteral=185,NULL=186,
    OPERATOR=187,TRUE=188,FALSE=189,EndOfLineComment=190,TraditionalComment=191,ELIPSIS=192};

public struct ValueType
#line 5 "parser.y"
{
    public int num;
    public string name;
    public float floatValue;
    public string stringValue;
    public bool boolValue;
	public Expression e;
	public Identifier id;
	public Statement stmt;
	public AST.Type t;
	public List<AST.Type> ts;
	public List<Statement> stmts;
	public List<Identifier> ids;
	public List<Expression> es;
	public MemberDeclaration memberDeclaration;
	public List<MemberDeclaration> memberDeclarations;
	public MethodModifier methodModifier;
	public List<MethodModifier> methodModifiers;
	public ClassModifier classModifier;
	public List<ClassModifier> classModifiers;
	public TypeDeclaration typeDeclaration;
	public List<TypeDeclaration> typeDeclarations;
	public Node node;
	public MethodHeader methodHeader;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[207];
  private static State[] states = new State[283];
  private static string[] nonTerms = new string[] {
      "Expression", "Literal", "PrimaryNoNewArray", "Primary", "PodtfixExpression", 
      "UnaryExpressionNotPlusMinus", "UnaryExpression", "MultiplicativeExpression", 
      "AddictiveExpression", "ShiftExpression", "RalationalExpression", "EqualityExpression", 
      "AndExpression", "ExclusiveOrExpression", "InclusiveOrExpression", "ConditionalAndExpression", 
      "ConditionalOrExpression", "ConditionalExpression", "AssignmentExpression", 
      "ExpressionName", "LeftHandSide", "Assignment", "VariableDeclaratorList", 
      "VariableDeclaratorId", "VariableDeclarator", "StatementExpression", "VariableDeclarators", 
      "IntegralType", "NumericType", "UnannPrimitiveType", "UnannType", "Result", 
      "UnannClassType", "UnannClassOrInterfaceType", "UnannArrayType", "NormalClassDeclaration", 
      "ClassDeclaration", "TypeDeclaration", "FloatingPointType", "LocalVariableDeclaration", 
      "LocalVariableDeclarationStatement", "BlockStatement", "Statement", "ExpressionStatement", 
      "StatementWithoutTrailingSubstatement", "FormalParameter", "LastFormalParameter", 
      "MethodBody", "IfThenStatement", "BlockStatements", "Block", "FormalParameterList", 
      "FormalParameters", "MethodDeclaration", "ClassMemberDeclaration", "ClassBodyDeclaration", 
      "MethodModifier", "MethodModifiers", "ClassBodyDeclarations", "ClassBody", 
      "ClassModifier", "ClassModifiers", "TypeDeclarations", "CompilationUnit", 
      "MethodDeclarator", "MethodHeader", "$accept", "PackageDeclarations", "ImportDeclarations", 
      "PackageDeclaration", "PackageModifiers", "ColonSeparatedIdents", "PackageModifier", 
      "Annotation", "Annotations", "NormalAnnotation", "MarkerAnnotation", "SingleElementAnnotation", 
      "ImportDeclaration", "SingleTypeImportDeclaration", "TypeImportOnDemandDeclaration", 
      "SingleStaticImportDeclaration", "StaticImportOnDemandDeclaration", "InterfaceDeclaration", 
      "EnumDeclaration", "Identifier", "TypeParameters", "Superclasses", "Superinterfaces", 
      "Superclass", "ClassType", "TypeArguments", "ClassOrInterfaceType", "InterfaceType", 
      "InterfaceTypeList", "ComaSeparatedInterfaceTypeList", "Throws", "Dims", 
      "LabeledStatement", "IfThenElseStatement", "WhileStatement", "ForStatement", 
      "BasicForStatement", "ForInit", "ForUpdate", "StatementExpressionList", 
      "StatmentExpression", "StatementNoShortIf", "EmptyStatement", "AssignmentOperator", 
      "VariableModifiers", "VariableInitializer", "EnumBody", "NormalInterfaceDeclaration", 
      "AnnotationTypeDeclaration", "InterfaceModifiers", "ExtendsInterfaces", 
      "InterfaceBody", "AnnotationTypeBody", "InterfaceModifier", "TypeName", 
      "PackageOrTypeName", "UnannReferenceType", "DimsPost", };

  static Parser() {
    states[0] = new State(new int[]{166,-9,159,-5,169,-5,168,-5,167,-5,135,-5,172,-5,152,-5,143,-5,150,-5,162,-5,64,-5,128,-5},new int[]{-64,1,-68,3,-70,270,-71,272,-73,280,-74,282,-76,54,-77,55,-78,56});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{159,251,169,-25,168,-25,167,-25,135,-25,172,-25,152,-25,143,-25,150,-25,162,-25,64,-25,128,-25},new int[]{-69,4,-79,248,-80,250,-81,267,-82,268,-83,269});
    states[4] = new State(-31,new int[]{-63,5});
    states[5] = new State(new int[]{169,216,168,217,167,218,135,219,172,220,152,215,128,-2,143,-54,150,-54,162,-167,64,-167},new int[]{-38,6,-37,7,-36,8,-62,9,-61,208,-85,221,-84,222,-114,223,-116,224,-120,240,-115,247});
    states[6] = new State(-30);
    states[7] = new State(-32);
    states[8] = new State(-34);
    states[9] = new State(new int[]{143,10,150,202});
    states[10] = new State(new int[]{130,57},new int[]{-86,11});
    states[11] = new State(-162,new int[]{-87,12});
    states[12] = new State(new int[]{151,199,158,-39,123,-39},new int[]{-88,13,-90,197});
    states[13] = new State(new int[]{158,181,123,-47},new int[]{-89,14});
    states[14] = new State(new int[]{123,16},new int[]{-60,15});
    states[15] = new State(-36);
    states[16] = new State(-63,new int[]{-59,17});
    states[17] = new State(new int[]{125,18,59,180,182,-174,169,-174,168,-174,167,-174,135,-174,172,-174},new int[]{-56,19,-55,20,-54,21,-58,22});
    states[18] = new State(-61);
    states[19] = new State(-62);
    states[20] = new State(-64);
    states[21] = new State(-65);
    states[22] = new State(new int[]{182,174,169,175,168,176,167,177,135,178,172,179},new int[]{-66,23,-57,152,-32,153});
    states[23] = new State(new int[]{123,26,59,151},new int[]{-48,24,-51,25});
    states[24] = new State(-67);
    states[25] = new State(-72);
    states[26] = new State(-76,new int[]{-50,27});
    states[27] = new State(new int[]{125,28,123,26,130,57,156,116,184,126,155,133,139,-131,171,-131,161,-131,163,-131,142,-131,154,-131,148,-131,137,-131},new int[]{-42,29,-41,30,-40,31,-111,33,-43,77,-45,78,-51,79,-44,80,-26,81,-22,83,-21,84,-20,110,-86,111,-99,114,-49,115,-100,124,-101,125,-102,131,-103,132});
    states[28] = new State(-74);
    states[29] = new State(-75);
    states[30] = new State(-77);
    states[31] = new State(new int[]{59,32});
    states[32] = new State(-129);
    states[33] = new State(new int[]{139,61,171,62,161,63,163,64,142,65,154,67,148,68,137,69,130,57},new int[]{-31,34,-30,58,-29,59,-28,60,-39,66,-123,70,-35,71,-34,72,-33,74,-86,75});
    states[34] = new State(new int[]{130,57},new int[]{-23,35,-25,36,-24,39,-86,42});
    states[35] = new State(-130);
    states[36] = new State(new int[]{59,-144,130,-147},new int[]{-27,37});
    states[37] = new State(new int[]{130,57,59,-145},new int[]{-25,38,-24,39,-86,42});
    states[38] = new State(-146);
    states[39] = new State(new int[]{61,40,130,-148,59,-148});
    states[40] = new State(-154,new int[]{-112,41});
    states[41] = new State(-149);
    states[42] = new State(new int[]{61,-150,130,-150,59,-150,41,-150,44,-150,139,-150,171,-150,161,-150,163,-150,142,-150,154,-150,148,-150,137,-150,91,-13},new int[]{-98,43,-75,44,-74,52,-76,54,-77,55,-78,56});
    states[43] = new State(-151);
    states[44] = new State(new int[]{91,45});
    states[45] = new State(new int[]{93,46});
    states[46] = new State(new int[]{91,-13,61,-206,130,-206,59,-206,41,-206,44,-206,139,-206,171,-206,161,-206,163,-206,142,-206,154,-206,148,-206,137,-206,192,-206,123,-206},new int[]{-124,47,-75,48,-74,52,-76,54,-77,55,-78,56});
    states[47] = new State(-203);
    states[48] = new State(new int[]{91,49});
    states[49] = new State(new int[]{93,50});
    states[50] = new State(new int[]{61,-204,130,-204,59,-204,41,-204,44,-204,139,-204,171,-204,161,-204,163,-204,142,-204,154,-204,148,-204,137,-204,192,-204,123,-204,91,-13},new int[]{-124,51,-75,48,-74,52,-76,54,-77,55,-78,56});
    states[51] = new State(-205);
    states[52] = new State(-11,new int[]{-75,53,-74,52,-76,54,-77,55,-78,56});
    states[53] = new State(-12);
    states[54] = new State(-14);
    states[55] = new State(-15);
    states[56] = new State(-16);
    states[57] = new State(-152);
    states[58] = new State(-132);
    states[59] = new State(-133);
    states[60] = new State(-135);
    states[61] = new State(-139);
    states[62] = new State(-140);
    states[63] = new State(-141);
    states[64] = new State(-142);
    states[65] = new State(-143);
    states[66] = new State(-136);
    states[67] = new State(-137);
    states[68] = new State(-138);
    states[69] = new State(-134);
    states[70] = new State(-197);
    states[71] = new State(-198);
    states[72] = new State(new int[]{130,-153,192,-153,91,-13},new int[]{-98,73,-75,44,-74,52,-76,54,-77,55,-78,56});
    states[73] = new State(-199);
    states[74] = new State(-200);
    states[75] = new State(-45,new int[]{-92,76});
    states[76] = new State(-201);
    states[77] = new State(-78);
    states[78] = new State(-79);
    states[79] = new State(-97);
    states[80] = new State(-98);
    states[81] = new State(new int[]{59,82});
    states[82] = new State(-101);
    states[83] = new State(-102);
    states[84] = new State(new int[]{187,109},new int[]{-110,85});
    states[85] = new State(new int[]{131,105,133,106,134,107,132,108},new int[]{-1,86,-19,87,-18,88,-17,89,-16,90,-15,91,-14,92,-13,93,-12,94,-11,95,-10,96,-9,97,-8,98,-7,99,-6,100,-5,101,-4,102,-3,103,-2,104});
    states[86] = new State(-103);
    states[87] = new State(-107);
    states[88] = new State(-108);
    states[89] = new State(-109);
    states[90] = new State(-110);
    states[91] = new State(-111);
    states[92] = new State(-112);
    states[93] = new State(-113);
    states[94] = new State(-114);
    states[95] = new State(-115);
    states[96] = new State(-116);
    states[97] = new State(-117);
    states[98] = new State(-118);
    states[99] = new State(-119);
    states[100] = new State(-120);
    states[101] = new State(-121);
    states[102] = new State(-122);
    states[103] = new State(-123);
    states[104] = new State(-124);
    states[105] = new State(-125);
    states[106] = new State(-126);
    states[107] = new State(-127);
    states[108] = new State(-128);
    states[109] = new State(-106);
    states[110] = new State(-104);
    states[111] = new State(new int[]{58,112,187,-105});
    states[112] = new State(new int[]{123,26,130,57,156,116,184,126,155,133},new int[]{-43,113,-45,78,-51,79,-44,80,-26,81,-22,83,-21,84,-20,110,-86,111,-99,114,-49,115,-100,124,-101,125,-102,131,-103,132});
    states[113] = new State(-85);
    states[114] = new State(-80);
    states[115] = new State(-81);
    states[116] = new State(new int[]{40,117});
    states[117] = new State(new int[]{131,105,133,106,134,107,132,108},new int[]{-1,118,-19,87,-18,88,-17,89,-16,90,-15,91,-14,92,-13,93,-12,94,-11,95,-10,96,-9,97,-8,98,-7,99,-6,100,-5,101,-4,102,-3,103,-2,104});
    states[118] = new State(new int[]{41,119});
    states[119] = new State(new int[]{123,26,130,57,156,116,184,126,155,133},new int[]{-43,120,-108,121,-45,150,-51,79,-44,80,-26,81,-22,83,-21,84,-20,110,-86,111,-99,114,-49,115,-100,124,-101,125,-102,131,-103,132});
    states[120] = new State(-94);
    states[121] = new State(new int[]{149,122});
    states[122] = new State(new int[]{123,26,130,57,156,116,184,126,155,133},new int[]{-43,123,-45,78,-51,79,-44,80,-26,81,-22,83,-21,84,-20,110,-86,111,-99,114,-49,115,-100,124,-101,125,-102,131,-103,132});
    states[123] = new State(-95);
    states[124] = new State(-82);
    states[125] = new State(-83);
    states[126] = new State(new int[]{40,127});
    states[127] = new State(new int[]{131,105,133,106,134,107,132,108},new int[]{-1,128,-19,87,-18,88,-17,89,-16,90,-15,91,-14,92,-13,93,-12,94,-11,95,-10,96,-9,97,-8,98,-7,99,-6,100,-5,101,-4,102,-3,103,-2,104});
    states[128] = new State(new int[]{41,129});
    states[129] = new State(new int[]{123,26,130,57,156,116,184,126,155,133},new int[]{-43,130,-45,78,-51,79,-44,80,-26,81,-22,83,-21,84,-20,110,-86,111,-99,114,-49,115,-100,124,-101,125,-102,131,-103,132});
    states[130] = new State(-86);
    states[131] = new State(-84);
    states[132] = new State(-87);
    states[133] = new State(new int[]{40,134});
    states[134] = new State(-131,new int[]{-104,135,-40,149,-111,33});
    states[135] = new State(new int[]{59,136});
    states[136] = new State(new int[]{131,105,133,106,134,107,132,108},new int[]{-1,137,-19,87,-18,88,-17,89,-16,90,-15,91,-14,92,-13,93,-12,94,-11,95,-10,96,-9,97,-8,98,-7,99,-6,100,-5,101,-4,102,-3,103,-2,104});
    states[137] = new State(new int[]{59,138});
    states[138] = new State(new int[]{130,57},new int[]{-105,139,-106,142,-26,143,-22,146,-21,84,-20,110,-86,147,-107,148});
    states[139] = new State(new int[]{41,140});
    states[140] = new State(new int[]{123,26,130,57,156,116,184,126,155,133},new int[]{-43,141,-45,78,-51,79,-44,80,-26,81,-22,83,-21,84,-20,110,-86,111,-99,114,-49,115,-100,124,-101,125,-102,131,-103,132});
    states[141] = new State(-88);
    states[142] = new State(-90);
    states[143] = new State(new int[]{44,144});
    states[144] = new State(new int[]{130,57},new int[]{-106,145,-26,143,-22,146,-21,84,-20,110,-86,147,-107,148});
    states[145] = new State(-91);
    states[146] = new State(new int[]{44,-102,41,-93});
    states[147] = new State(-105);
    states[148] = new State(-92);
    states[149] = new State(-89);
    states[150] = new State(new int[]{125,-79,123,-79,130,-79,156,-79,184,-79,155,-79,139,-79,171,-79,161,-79,163,-79,142,-79,154,-79,148,-79,137,-79,149,-96});
    states[151] = new State(-73);
    states[152] = new State(-173);
    states[153] = new State(new int[]{130,57},new int[]{-65,154,-86,156});
    states[154] = new State(-70,new int[]{-97,155});
    states[155] = new State(-68);
    states[156] = new State(new int[]{40,157});
    states[157] = new State(new int[]{44,-194,139,-131,171,-131,161,-131,163,-131,142,-131,154,-131,148,-131,137,-131,130,-131,41,-190},new int[]{-52,158,-53,161,-47,173,-111,164,-46,169});
    states[158] = new State(new int[]{41,159});
    states[159] = new State(new int[]{123,-153,59,-153,91,-13},new int[]{-98,160,-75,44,-74,52,-76,54,-77,55,-78,56});
    states[160] = new State(-69);
    states[161] = new State(new int[]{44,162,139,-131,171,-131,161,-131,163,-131,142,-131,154,-131,148,-131,137,-131,130,-131},new int[]{-46,170,-111,171});
    states[162] = new State(-131,new int[]{-47,163,-111,164,-46,169});
    states[163] = new State(-188);
    states[164] = new State(new int[]{139,61,171,62,161,63,163,64,142,65,154,67,148,68,137,69,130,57},new int[]{-31,165,-30,58,-29,59,-28,60,-39,66,-123,70,-35,71,-34,72,-33,74,-86,75});
    states[165] = new State(new int[]{192,166,130,57},new int[]{-24,168,-86,42});
    states[166] = new State(new int[]{130,57},new int[]{-24,167,-86,42});
    states[167] = new State(-191);
    states[168] = new State(-195);
    states[169] = new State(-192);
    states[170] = new State(-193);
    states[171] = new State(new int[]{139,61,171,62,161,63,163,64,142,65,154,67,148,68,137,69,130,57},new int[]{-31,172,-30,58,-29,59,-28,60,-39,66,-123,70,-35,71,-34,72,-33,74,-86,75});
    states[172] = new State(new int[]{130,57},new int[]{-24,168,-86,42});
    states[173] = new State(-189);
    states[174] = new State(-71);
    states[175] = new State(-175);
    states[176] = new State(-176);
    states[177] = new State(-177);
    states[178] = new State(-178);
    states[179] = new State(-179);
    states[180] = new State(-66);
    states[181] = new State(-13,new int[]{-95,182,-94,183,-91,188,-75,189,-74,52,-76,54,-77,55,-78,56,-93,192});
    states[182] = new State(-46);
    states[183] = new State(new int[]{44,185,46,-44,123,-51},new int[]{-96,184});
    states[184] = new State(-48);
    states[185] = new State(-13,new int[]{-94,186,-91,188,-75,189,-74,52,-76,54,-77,55,-78,56,-93,192});
    states[186] = new State(new int[]{44,185,123,-49,46,-44},new int[]{-96,187});
    states[187] = new State(-50);
    states[188] = new State(new int[]{44,-52,123,-52,46,-43});
    states[189] = new State(new int[]{130,190});
    states[190] = new State(-45,new int[]{-92,191});
    states[191] = new State(-41);
    states[192] = new State(new int[]{46,193});
    states[193] = new State(-13,new int[]{-75,194,-74,52,-76,54,-77,55,-78,56});
    states[194] = new State(new int[]{130,195});
    states[195] = new State(-45,new int[]{-92,196});
    states[196] = new State(-42);
    states[197] = new State(new int[]{151,199,158,-37,123,-37},new int[]{-88,198,-90,197});
    states[198] = new State(-38);
    states[199] = new State(-13,new int[]{-91,200,-75,189,-74,52,-76,54,-77,55,-78,56,-93,192,-94,201});
    states[200] = new State(new int[]{151,-40,158,-40,123,-40,46,-43});
    states[201] = new State(-44);
    states[202] = new State(new int[]{130,203});
    states[203] = new State(new int[]{158,181,123,-47},new int[]{-89,204});
    states[204] = new State(new int[]{123,206},new int[]{-113,205});
    states[205] = new State(-155);
    states[206] = new State(new int[]{125,207});
    states[207] = new State(-156);
    states[208] = new State(new int[]{169,210,168,211,167,212,135,213,172,214,152,215,143,-54,150,-54},new int[]{-62,209,-61,208});
    states[209] = new State(-53);
    states[210] = new State(-55);
    states[211] = new State(-56);
    states[212] = new State(-57);
    states[213] = new State(-58);
    states[214] = new State(-59);
    states[215] = new State(-60);
    states[216] = new State(new int[]{169,-55,168,-55,167,-55,135,-55,172,-55,152,-55,143,-55,150,-55,162,-168,64,-168});
    states[217] = new State(new int[]{169,-56,168,-56,167,-56,135,-56,172,-56,152,-56,143,-56,150,-56,162,-169,64,-169});
    states[218] = new State(new int[]{169,-57,168,-57,167,-57,135,-57,172,-57,152,-57,143,-57,150,-57,162,-170,64,-170});
    states[219] = new State(new int[]{169,-58,168,-58,167,-58,135,-58,172,-58,152,-58,143,-58,150,-58,162,-171,64,-171});
    states[220] = new State(new int[]{169,-59,168,-59,167,-59,135,-59,172,-59,152,-59,143,-59,150,-59,162,-172,64,-172});
    states[221] = new State(-35);
    states[222] = new State(-33);
    states[223] = new State(-157);
    states[224] = new State(new int[]{162,225,64,234});
    states[225] = new State(new int[]{130,226});
    states[226] = new State(-162,new int[]{-87,227});
    states[227] = new State(new int[]{151,232},new int[]{-117,228});
    states[228] = new State(new int[]{123,230},new int[]{-118,229});
    states[229] = new State(-159);
    states[230] = new State(new int[]{125,231});
    states[231] = new State(-164);
    states[232] = new State(-13,new int[]{-95,233,-94,183,-91,188,-75,189,-74,52,-76,54,-77,55,-78,56,-93,192});
    states[233] = new State(-163);
    states[234] = new State(new int[]{162,235});
    states[235] = new State(new int[]{130,236});
    states[236] = new State(new int[]{123,238},new int[]{-119,237});
    states[237] = new State(-160);
    states[238] = new State(new int[]{125,239});
    states[239] = new State(-161);
    states[240] = new State(new int[]{169,242,168,243,167,244,135,245,172,246,162,-165,64,-165},new int[]{-116,241,-120,240});
    states[241] = new State(-166);
    states[242] = new State(-168);
    states[243] = new State(-169);
    states[244] = new State(-170);
    states[245] = new State(-171);
    states[246] = new State(-172);
    states[247] = new State(-158);
    states[248] = new State(new int[]{159,251,169,-23,168,-23,167,-23,135,-23,172,-23,152,-23,143,-23,150,-23,162,-23,64,-23,128,-23},new int[]{-69,249,-79,248,-80,250,-81,267,-82,268,-83,269});
    states[249] = new State(-24);
    states[250] = new State(-26);
    states[251] = new State(new int[]{172,259,130,266},new int[]{-121,252,-122,254});
    states[252] = new State(new int[]{59,253});
    states[253] = new State(-180);
    states[254] = new State(new int[]{46,255});
    states[255] = new State(new int[]{42,256,130,258});
    states[256] = new State(new int[]{59,257});
    states[257] = new State(-181);
    states[258] = new State(new int[]{59,-185,46,-187});
    states[259] = new State(new int[]{130,266},new int[]{-121,260,-122,262});
    states[260] = new State(new int[]{59,261});
    states[261] = new State(-182);
    states[262] = new State(new int[]{46,263});
    states[263] = new State(new int[]{42,264,130,258});
    states[264] = new State(new int[]{59,265});
    states[265] = new State(-183);
    states[266] = new State(new int[]{59,-184,46,-186});
    states[267] = new State(-27);
    states[268] = new State(-28);
    states[269] = new State(-29);
    states[270] = new State(new int[]{159,-3,169,-3,168,-3,167,-3,135,-3,172,-3,152,-3,143,-3,150,-3,162,-3,64,-3,128,-3,166,-9},new int[]{-68,271,-70,270,-71,272,-73,280,-74,282,-76,54,-77,55,-78,56});
    states[271] = new State(-4);
    states[272] = new State(new int[]{166,273});
    states[273] = new State(new int[]{130,274});
    states[274] = new State(new int[]{46,277,59,-19},new int[]{-72,275});
    states[275] = new State(new int[]{59,276});
    states[276] = new State(-6);
    states[277] = new State(new int[]{130,278});
    states[278] = new State(new int[]{46,277,59,-17},new int[]{-72,279});
    states[279] = new State(-18);
    states[280] = new State(-7,new int[]{-71,281,-73,280,-74,282,-76,54,-77,55,-78,56});
    states[281] = new State(-8);
    states[282] = new State(-10);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-67, new int[]{-64,128});
    rules[2] = new Rule(-64, new int[]{-68,-69,-63});
    rules[3] = new Rule(-68, new int[]{-70});
    rules[4] = new Rule(-68, new int[]{-70,-68});
    rules[5] = new Rule(-68, new int[]{});
    rules[6] = new Rule(-70, new int[]{-71,166,130,-72,59});
    rules[7] = new Rule(-71, new int[]{-73});
    rules[8] = new Rule(-71, new int[]{-73,-71});
    rules[9] = new Rule(-71, new int[]{});
    rules[10] = new Rule(-73, new int[]{-74});
    rules[11] = new Rule(-75, new int[]{-74});
    rules[12] = new Rule(-75, new int[]{-74,-75});
    rules[13] = new Rule(-75, new int[]{});
    rules[14] = new Rule(-74, new int[]{-76});
    rules[15] = new Rule(-74, new int[]{-77});
    rules[16] = new Rule(-74, new int[]{-78});
    rules[17] = new Rule(-72, new int[]{46,130});
    rules[18] = new Rule(-72, new int[]{46,130,-72});
    rules[19] = new Rule(-72, new int[]{});
    rules[20] = new Rule(-76, new int[]{});
    rules[21] = new Rule(-77, new int[]{});
    rules[22] = new Rule(-78, new int[]{});
    rules[23] = new Rule(-69, new int[]{-79});
    rules[24] = new Rule(-69, new int[]{-79,-69});
    rules[25] = new Rule(-69, new int[]{});
    rules[26] = new Rule(-79, new int[]{-80});
    rules[27] = new Rule(-79, new int[]{-81});
    rules[28] = new Rule(-79, new int[]{-82});
    rules[29] = new Rule(-79, new int[]{-83});
    rules[30] = new Rule(-63, new int[]{-63,-38});
    rules[31] = new Rule(-63, new int[]{});
    rules[32] = new Rule(-38, new int[]{-37});
    rules[33] = new Rule(-38, new int[]{-84});
    rules[34] = new Rule(-37, new int[]{-36});
    rules[35] = new Rule(-37, new int[]{-85});
    rules[36] = new Rule(-36, new int[]{-62,143,-86,-87,-88,-89,-60});
    rules[37] = new Rule(-88, new int[]{-90});
    rules[38] = new Rule(-88, new int[]{-90,-88});
    rules[39] = new Rule(-88, new int[]{});
    rules[40] = new Rule(-90, new int[]{151,-91});
    rules[41] = new Rule(-91, new int[]{-75,130,-92});
    rules[42] = new Rule(-91, new int[]{-93,46,-75,130,-92});
    rules[43] = new Rule(-93, new int[]{-91});
    rules[44] = new Rule(-93, new int[]{-94});
    rules[45] = new Rule(-92, new int[]{});
    rules[46] = new Rule(-89, new int[]{158,-95});
    rules[47] = new Rule(-89, new int[]{});
    rules[48] = new Rule(-95, new int[]{-94,-96});
    rules[49] = new Rule(-96, new int[]{44,-94});
    rules[50] = new Rule(-96, new int[]{44,-94,-96});
    rules[51] = new Rule(-96, new int[]{});
    rules[52] = new Rule(-94, new int[]{-91});
    rules[53] = new Rule(-62, new int[]{-61,-62});
    rules[54] = new Rule(-62, new int[]{});
    rules[55] = new Rule(-61, new int[]{169});
    rules[56] = new Rule(-61, new int[]{168});
    rules[57] = new Rule(-61, new int[]{167});
    rules[58] = new Rule(-61, new int[]{135});
    rules[59] = new Rule(-61, new int[]{172});
    rules[60] = new Rule(-61, new int[]{152});
    rules[61] = new Rule(-60, new int[]{123,-59,125});
    rules[62] = new Rule(-59, new int[]{-59,-56});
    rules[63] = new Rule(-59, new int[]{});
    rules[64] = new Rule(-56, new int[]{-55});
    rules[65] = new Rule(-55, new int[]{-54});
    rules[66] = new Rule(-55, new int[]{59});
    rules[67] = new Rule(-54, new int[]{-58,-66,-48});
    rules[68] = new Rule(-66, new int[]{-32,-65,-97});
    rules[69] = new Rule(-65, new int[]{-86,40,-52,41,-98});
    rules[70] = new Rule(-97, new int[]{});
    rules[71] = new Rule(-32, new int[]{182});
    rules[72] = new Rule(-48, new int[]{-51});
    rules[73] = new Rule(-48, new int[]{59});
    rules[74] = new Rule(-51, new int[]{123,-50,125});
    rules[75] = new Rule(-50, new int[]{-50,-42});
    rules[76] = new Rule(-50, new int[]{});
    rules[77] = new Rule(-42, new int[]{-41});
    rules[78] = new Rule(-42, new int[]{-43});
    rules[79] = new Rule(-43, new int[]{-45});
    rules[80] = new Rule(-43, new int[]{-99});
    rules[81] = new Rule(-43, new int[]{-49});
    rules[82] = new Rule(-43, new int[]{-100});
    rules[83] = new Rule(-43, new int[]{-101});
    rules[84] = new Rule(-43, new int[]{-102});
    rules[85] = new Rule(-99, new int[]{-86,58,-43});
    rules[86] = new Rule(-101, new int[]{184,40,-1,41,-43});
    rules[87] = new Rule(-102, new int[]{-103});
    rules[88] = new Rule(-103, new int[]{155,40,-104,59,-1,59,-105,41,-43});
    rules[89] = new Rule(-104, new int[]{-40});
    rules[90] = new Rule(-105, new int[]{-106});
    rules[91] = new Rule(-106, new int[]{-26,44,-106});
    rules[92] = new Rule(-106, new int[]{-107});
    rules[93] = new Rule(-107, new int[]{-22});
    rules[94] = new Rule(-49, new int[]{156,40,-1,41,-43});
    rules[95] = new Rule(-100, new int[]{156,40,-1,41,-108,149,-43});
    rules[96] = new Rule(-108, new int[]{-45});
    rules[97] = new Rule(-45, new int[]{-51});
    rules[98] = new Rule(-45, new int[]{-44});
    rules[99] = new Rule(-109, new int[]{59});
    rules[100] = new Rule(-45, new int[]{-44});
    rules[101] = new Rule(-44, new int[]{-26,59});
    rules[102] = new Rule(-26, new int[]{-22});
    rules[103] = new Rule(-22, new int[]{-21,-110,-1});
    rules[104] = new Rule(-21, new int[]{-20});
    rules[105] = new Rule(-20, new int[]{-86});
    rules[106] = new Rule(-110, new int[]{187});
    rules[107] = new Rule(-1, new int[]{-19});
    rules[108] = new Rule(-19, new int[]{-18});
    rules[109] = new Rule(-18, new int[]{-17});
    rules[110] = new Rule(-17, new int[]{-16});
    rules[111] = new Rule(-16, new int[]{-15});
    rules[112] = new Rule(-15, new int[]{-14});
    rules[113] = new Rule(-14, new int[]{-13});
    rules[114] = new Rule(-13, new int[]{-12});
    rules[115] = new Rule(-12, new int[]{-11});
    rules[116] = new Rule(-11, new int[]{-10});
    rules[117] = new Rule(-10, new int[]{-9});
    rules[118] = new Rule(-9, new int[]{-8});
    rules[119] = new Rule(-8, new int[]{-7});
    rules[120] = new Rule(-7, new int[]{-6});
    rules[121] = new Rule(-6, new int[]{-5});
    rules[122] = new Rule(-5, new int[]{-4});
    rules[123] = new Rule(-4, new int[]{-3});
    rules[124] = new Rule(-3, new int[]{-2});
    rules[125] = new Rule(-2, new int[]{131});
    rules[126] = new Rule(-2, new int[]{133});
    rules[127] = new Rule(-2, new int[]{134});
    rules[128] = new Rule(-2, new int[]{132});
    rules[129] = new Rule(-41, new int[]{-40,59});
    rules[130] = new Rule(-40, new int[]{-111,-31,-23});
    rules[131] = new Rule(-111, new int[]{});
    rules[132] = new Rule(-31, new int[]{-30});
    rules[133] = new Rule(-30, new int[]{-29});
    rules[134] = new Rule(-30, new int[]{137});
    rules[135] = new Rule(-29, new int[]{-28});
    rules[136] = new Rule(-29, new int[]{-39});
    rules[137] = new Rule(-39, new int[]{154});
    rules[138] = new Rule(-39, new int[]{148});
    rules[139] = new Rule(-28, new int[]{139});
    rules[140] = new Rule(-28, new int[]{171});
    rules[141] = new Rule(-28, new int[]{161});
    rules[142] = new Rule(-28, new int[]{163});
    rules[143] = new Rule(-28, new int[]{142});
    rules[144] = new Rule(-23, new int[]{-25});
    rules[145] = new Rule(-23, new int[]{-25,-27});
    rules[146] = new Rule(-27, new int[]{-27,-25});
    rules[147] = new Rule(-27, new int[]{});
    rules[148] = new Rule(-25, new int[]{-24});
    rules[149] = new Rule(-25, new int[]{-24,61,-112});
    rules[150] = new Rule(-24, new int[]{-86});
    rules[151] = new Rule(-24, new int[]{-86,-98});
    rules[152] = new Rule(-86, new int[]{130});
    rules[153] = new Rule(-98, new int[]{});
    rules[154] = new Rule(-112, new int[]{});
    rules[155] = new Rule(-85, new int[]{-62,150,130,-89,-113});
    rules[156] = new Rule(-113, new int[]{123,125});
    rules[157] = new Rule(-84, new int[]{-114});
    rules[158] = new Rule(-84, new int[]{-115});
    rules[159] = new Rule(-114, new int[]{-116,162,130,-87,-117,-118});
    rules[160] = new Rule(-115, new int[]{-116,64,162,130,-119});
    rules[161] = new Rule(-119, new int[]{123,125});
    rules[162] = new Rule(-87, new int[]{});
    rules[163] = new Rule(-117, new int[]{151,-95});
    rules[164] = new Rule(-118, new int[]{123,125});
    rules[165] = new Rule(-116, new int[]{-120});
    rules[166] = new Rule(-116, new int[]{-120,-116});
    rules[167] = new Rule(-116, new int[]{});
    rules[168] = new Rule(-120, new int[]{169});
    rules[169] = new Rule(-120, new int[]{168});
    rules[170] = new Rule(-120, new int[]{167});
    rules[171] = new Rule(-120, new int[]{135});
    rules[172] = new Rule(-120, new int[]{172});
    rules[173] = new Rule(-58, new int[]{-58,-57});
    rules[174] = new Rule(-58, new int[]{});
    rules[175] = new Rule(-57, new int[]{169});
    rules[176] = new Rule(-57, new int[]{168});
    rules[177] = new Rule(-57, new int[]{167});
    rules[178] = new Rule(-57, new int[]{135});
    rules[179] = new Rule(-57, new int[]{172});
    rules[180] = new Rule(-80, new int[]{159,-121,59});
    rules[181] = new Rule(-81, new int[]{159,-122,46,42,59});
    rules[182] = new Rule(-82, new int[]{159,172,-121,59});
    rules[183] = new Rule(-83, new int[]{159,172,-122,46,42,59});
    rules[184] = new Rule(-121, new int[]{130});
    rules[185] = new Rule(-121, new int[]{-122,46,130});
    rules[186] = new Rule(-122, new int[]{130});
    rules[187] = new Rule(-122, new int[]{-122,46,130});
    rules[188] = new Rule(-52, new int[]{-53,44,-47});
    rules[189] = new Rule(-52, new int[]{-47});
    rules[190] = new Rule(-52, new int[]{});
    rules[191] = new Rule(-47, new int[]{-111,-31,192,-24});
    rules[192] = new Rule(-47, new int[]{-46});
    rules[193] = new Rule(-53, new int[]{-53,-46});
    rules[194] = new Rule(-53, new int[]{});
    rules[195] = new Rule(-46, new int[]{-111,-31,-24});
    rules[196] = new Rule(-111, new int[]{});
    rules[197] = new Rule(-31, new int[]{-123});
    rules[198] = new Rule(-123, new int[]{-35});
    rules[199] = new Rule(-35, new int[]{-34,-98});
    rules[200] = new Rule(-34, new int[]{-33});
    rules[201] = new Rule(-33, new int[]{-86,-92});
    rules[202] = new Rule(-92, new int[]{});
    rules[203] = new Rule(-98, new int[]{-75,91,93,-124});
    rules[204] = new Rule(-124, new int[]{-75,91,93});
    rules[205] = new Rule(-124, new int[]{-75,91,93,-124});
    rules[206] = new Rule(-124, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // CompilationUnit -> PackageDeclarations, ImportDeclarations, TypeDeclarations
#line 63 "parser.y"
                                                            { RootNode = new CompilationUnit(ValueStack[ValueStack.Depth-1].ts); }
#line default
        break;
      case 30: // TypeDeclarations -> TypeDeclarations, TypeDeclaration
#line 119 "parser.y"
                                           { CurrentSemanticValue.ts = ValueStack[ValueStack.Depth-2].ts; ValueStack[ValueStack.Depth-2].ts.Add(ValueStack[ValueStack.Depth-1].t); }
#line default
        break;
      case 31: // TypeDeclarations -> /* empty */
#line 120 "parser.y"
                             { CurrentSemanticValue.ts = new List<AST.Type>(); }
#line default
        break;
      case 32: // TypeDeclaration -> ClassDeclaration
#line 124 "parser.y"
                               { CurrentSemanticValue.t = ValueStack[ValueStack.Depth-1].t; }
#line default
        break;
      case 34: // ClassDeclaration -> NormalClassDeclaration
#line 129 "parser.y"
                                    {CurrentSemanticValue.t = ValueStack[ValueStack.Depth-1].t;}
#line default
        break;
      case 36: // NormalClassDeclaration -> ClassModifiers, CLASS, Identifier, TypeParameters, 
               //                           Superclasses, Superinterfaces, ClassBody
#line 133 "parser.y"
                                                                                         {CurrentSemanticValue.t = new NormalClassDeclaration(ValueStack[ValueStack.Depth-7].classModifiers,new Identifier(ValueStack[ValueStack.Depth-5].name),ValueStack[ValueStack.Depth-1].memberDeclarations);}
#line default
        break;
      case 53: // ClassModifiers -> ClassModifier, ClassModifiers
#line 171 "parser.y"
                                      {CurrentSemanticValue.classModifiers = ValueStack[ValueStack.Depth-1].classModifiers; ValueStack[ValueStack.Depth-1].classModifiers.Add(ValueStack[ValueStack.Depth-2].classModifier);}
#line default
        break;
      case 54: // ClassModifiers -> /* empty */
#line 172 "parser.y"
                            {CurrentSemanticValue.classModifiers = new List<ClassModifier>();}
#line default
        break;
      case 55: // ClassModifier -> PUBLIC
#line 176 "parser.y"
                       {CurrentSemanticValue.classModifier = ClassModifier.Public		;}
#line default
        break;
      case 56: // ClassModifier -> PROTECTED
#line 177 "parser.y"
                           {CurrentSemanticValue.classModifier = ClassModifier.Protected 	;}
#line default
        break;
      case 57: // ClassModifier -> PRIVATE
#line 178 "parser.y"
                         {CurrentSemanticValue.classModifier = ClassModifier.Private		;}
#line default
        break;
      case 58: // ClassModifier -> ABSTRACT
#line 179 "parser.y"
                         {CurrentSemanticValue.classModifier = ClassModifier.Abstract	;}
#line default
        break;
      case 59: // ClassModifier -> STATIC
#line 180 "parser.y"
                        {CurrentSemanticValue.classModifier = ClassModifier.Static		;}
#line default
        break;
      case 60: // ClassModifier -> FINAL
#line 181 "parser.y"
                       {CurrentSemanticValue.classModifier = ClassModifier.Final		;}
#line default
        break;
      case 61: // ClassBody -> '{', ClassBodyDeclarations, '}'
#line 185 "parser.y"
                                        { CurrentSemanticValue.memberDeclarations = ValueStack[ValueStack.Depth-2].memberDeclarations; }
#line default
        break;
      case 62: // ClassBodyDeclarations -> ClassBodyDeclarations, ClassBodyDeclaration
#line 188 "parser.y"
                                                   { CurrentSemanticValue.memberDeclarations = ValueStack[ValueStack.Depth-2].memberDeclarations; ValueStack[ValueStack.Depth-2].memberDeclarations.Add(ValueStack[ValueStack.Depth-1].memberDeclaration); }
#line default
        break;
      case 63: // ClassBodyDeclarations -> /* empty */
#line 189 "parser.y"
                            { CurrentSemanticValue.memberDeclarations = new List<MemberDeclaration>(); }
#line default
        break;
      case 64: // ClassBodyDeclaration -> ClassMemberDeclaration
#line 193 "parser.y"
                                    { CurrentSemanticValue.memberDeclaration = ValueStack[ValueStack.Depth-1].memberDeclaration; }
#line default
        break;
      case 65: // ClassMemberDeclaration -> MethodDeclaration
#line 197 "parser.y"
                               { CurrentSemanticValue.memberDeclaration = ValueStack[ValueStack.Depth-1].memberDeclaration; }
#line default
        break;
      case 67: // MethodDeclaration -> MethodModifiers, MethodHeader, MethodBody
#line 201 "parser.y"
                                                { CurrentSemanticValue.memberDeclaration = new MethodDeclaration(ValueStack[ValueStack.Depth-3].methodModifiers,ValueStack[ValueStack.Depth-2].methodHeader,ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 68: // MethodHeader -> Result, MethodDeclarator, Throws
#line 204 "parser.y"
                                          { CurrentSemanticValue.methodHeader = new MethodHeader(ValueStack[ValueStack.Depth-3].t,ValueStack[ValueStack.Depth-2].node); }
#line default
        break;
      case 69: // MethodDeclarator -> Identifier, '(', FormalParameterList, ')', Dims
#line 208 "parser.y"
                                                         { CurrentSemanticValue.node = new MethodDeclarator(new Identifier(ValueStack[ValueStack.Depth-5].name),ValueStack[ValueStack.Depth-3].stmts ); }
#line default
        break;
      case 71: // Result -> VOID
#line 214 "parser.y"
                       {CurrentSemanticValue.t = null;}
#line default
        break;
      case 72: // MethodBody -> Block
#line 218 "parser.y"
                        {CurrentSemanticValue.stmt = new MethodBody(ValueStack[ValueStack.Depth-1].stmts);}
#line default
        break;
      case 74: // Block -> '{', BlockStatements, '}'
#line 222 "parser.y"
                                     {CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts;}
#line default
        break;
      case 75: // BlockStatements -> BlockStatements, BlockStatement
#line 225 "parser.y"
                                          {CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; ValueStack[ValueStack.Depth-2].stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 76: // BlockStatements -> /* empty */
#line 226 "parser.y"
                            {CurrentSemanticValue.stmts = new List<Statement>();}
#line default
        break;
      case 77: // BlockStatement -> LocalVariableDeclarationStatement
#line 230 "parser.y"
                                            {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 78: // BlockStatement -> Statement
#line 231 "parser.y"
                              {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 81: // Statement -> IfThenStatement
#line 236 "parser.y"
                               {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 94: // IfThenStatement -> IF, '(', Expression, ')', Statement
#line 276 "parser.y"
                                          {CurrentSemanticValue.stmt = new IfStatement(ValueStack[ValueStack.Depth-3].e,ValueStack[ValueStack.Depth-1].stmt,null);}
#line default
        break;
      case 100: // StatementWithoutTrailingSubstatement -> ExpressionStatement
#line 297 "parser.y"
                                    {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 101: // ExpressionStatement -> StatementExpression, ';'
#line 301 "parser.y"
                                    {CurrentSemanticValue.stmt = new ExpressionStatement(ValueStack[ValueStack.Depth-2].e);}
#line default
        break;
      case 102: // StatementExpression -> Assignment
#line 305 "parser.y"
                          {CurrentSemanticValue.e = ValueStack[ValueStack.Depth-1].e;}
#line default
        break;
      case 103: // Assignment -> LeftHandSide, AssignmentOperator, Expression
#line 309 "parser.y"
                                                  {CurrentSemanticValue.e = new AssignmentExpression(ValueStack[ValueStack.Depth-3].e, ValueStack[ValueStack.Depth-1].e);}
#line default
        break;
      case 104: // LeftHandSide -> ExpressionName
#line 313 "parser.y"
                             {CurrentSemanticValue.e = ValueStack[ValueStack.Depth-1].e;}
#line default
        break;
      case 105: // ExpressionName -> Identifier
#line 317 "parser.y"
                          {CurrentSemanticValue.e = new IdentifierExpression( new Identifier(ValueStack[ValueStack.Depth-1].name));}
#line default
        break;
      case 106: // AssignmentOperator -> OPERATOR
#line 321 "parser.y"
                        {CurrentSemanticValue = ValueStack[ValueStack.Depth-1];}
#line default
        break;
      case 125: // Literal -> IntegerLiteral
#line 379 "parser.y"
                             { CurrentSemanticValue.e=new IntegerLiteralExpression(ValueStack[ValueStack.Depth-1].num) ;}
#line default
        break;
      case 126: // Literal -> STRINGLITERAL
#line 380 "parser.y"
                          { CurrentSemanticValue.e=new StringLiteralExpression(ValueStack[ValueStack.Depth-1].stringValue) ;}
#line default
        break;
      case 127: // Literal -> BOOLEANLITERAL
#line 381 "parser.y"
                           { CurrentSemanticValue.e=new BooleanLiteralExpression(ValueStack[ValueStack.Depth-1].boolValue) ;}
#line default
        break;
      case 128: // Literal -> FLOATLITERAL
#line 382 "parser.y"
                         { CurrentSemanticValue.e=new FloatingPointLiteralExpression(ValueStack[ValueStack.Depth-1].floatValue) ;}
#line default
        break;
      case 129: // LocalVariableDeclarationStatement -> LocalVariableDeclaration, ';'
#line 386 "parser.y"
                                    {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-2].stmt; }
#line default
        break;
      case 130: // LocalVariableDeclaration -> VariableModifiers, UnannType, 
                //                             VariableDeclaratorList
#line 389 "parser.y"
                                                    { CurrentSemanticValue.stmt = new VariableDeclarationStatement(ValueStack[ValueStack.Depth-2].t,ValueStack[ValueStack.Depth-1].es,null);}
#line default
        break;
      case 132: // UnannType -> UnannPrimitiveType
#line 395 "parser.y"
                            {CurrentSemanticValue.t = ValueStack[ValueStack.Depth-1].t; }
#line default
        break;
      case 133: // UnannPrimitiveType -> NumericType
#line 399 "parser.y"
                       {CurrentSemanticValue.t = ValueStack[ValueStack.Depth-1].t; }
#line default
        break;
      case 134: // UnannPrimitiveType -> BOOLEAN
#line 400 "parser.y"
                     {CurrentSemanticValue.t = new NamedType( typeof(bool).Name );}
#line default
        break;
      case 135: // NumericType -> IntegralType
#line 404 "parser.y"
                       {CurrentSemanticValue.t = ValueStack[ValueStack.Depth-1].t; }
#line default
        break;
      case 136: // NumericType -> FloatingPointType
#line 405 "parser.y"
                            {CurrentSemanticValue.t = ValueStack[ValueStack.Depth-1].t; }
#line default
        break;
      case 137: // FloatingPointType -> FLOAT
#line 409 "parser.y"
                  {CurrentSemanticValue.t = new NamedType( typeof(float).Name );}
#line default
        break;
      case 138: // FloatingPointType -> DOUBLE
#line 410 "parser.y"
                    {CurrentSemanticValue.t = new NamedType( typeof(float).Name );}
#line default
        break;
      case 139: // IntegralType -> BYTE
#line 414 "parser.y"
                 {CurrentSemanticValue.t = new NamedType( typeof(int).Name );}
#line default
        break;
      case 140: // IntegralType -> SHORT
#line 415 "parser.y"
                   {CurrentSemanticValue.t = new NamedType( typeof(int).Name );}
#line default
        break;
      case 141: // IntegralType -> INT
#line 416 "parser.y"
                  {CurrentSemanticValue.t = new NamedType( typeof(int).Name );}
#line default
        break;
      case 142: // IntegralType -> LONG
#line 417 "parser.y"
                  {CurrentSemanticValue.t = new NamedType( typeof(int).Name );}
#line default
        break;
      case 143: // IntegralType -> CHAR
#line 418 "parser.y"
                  {CurrentSemanticValue.t = new NamedType( typeof(int).Name );}
#line default
        break;
      case 144: // VariableDeclaratorList -> VariableDeclarator
#line 422 "parser.y"
                            {CurrentSemanticValue.es = new List<Expression>();CurrentSemanticValue.es.Add(ValueStack[ValueStack.Depth-1].e);}
#line default
        break;
      case 146: // VariableDeclarators -> VariableDeclarators, VariableDeclarator
#line 427 "parser.y"
                                           {CurrentSemanticValue.es = ValueStack[ValueStack.Depth-2].es; ValueStack[ValueStack.Depth-2].es.Add(ValueStack[ValueStack.Depth-1].e);}
#line default
        break;
      case 147: // VariableDeclarators -> /* empty */
#line 428 "parser.y"
                        {CurrentSemanticValue.es = new List<Expression>();}
#line default
        break;
      case 148: // VariableDeclarator -> VariableDeclaratorId
#line 432 "parser.y"
                             {CurrentSemanticValue.e = ValueStack[ValueStack.Depth-1].e; }
#line default
        break;
      case 150: // VariableDeclaratorId -> Identifier
#line 436 "parser.y"
                      {CurrentSemanticValue.e = new IdentifierExpression( new Identifier(ValueStack[ValueStack.Depth-1].name));}
#line default
        break;
      case 173: // MethodModifiers -> MethodModifiers, MethodModifier
#line 490 "parser.y"
                                    {CurrentSemanticValue.methodModifiers = ValueStack[ValueStack.Depth-2].methodModifiers;ValueStack[ValueStack.Depth-2].methodModifiers.Add(ValueStack[ValueStack.Depth-1].methodModifier);}
#line default
        break;
      case 174: // MethodModifiers -> /* empty */
#line 491 "parser.y"
                     {CurrentSemanticValue.methodModifiers = new List<MethodModifier>();}
#line default
        break;
      case 175: // MethodModifier -> PUBLIC
#line 494 "parser.y"
                {CurrentSemanticValue.methodModifier= MethodModifier.Public;}
#line default
        break;
      case 176: // MethodModifier -> PROTECTED
#line 495 "parser.y"
                   {CurrentSemanticValue.methodModifier= MethodModifier.Protected;}
#line default
        break;
      case 177: // MethodModifier -> PRIVATE
#line 496 "parser.y"
                  {CurrentSemanticValue.methodModifier= MethodModifier.Private;}
#line default
        break;
      case 178: // MethodModifier -> ABSTRACT
#line 497 "parser.y"
                  {CurrentSemanticValue.methodModifier= MethodModifier.Abstract;}
#line default
        break;
      case 179: // MethodModifier -> STATIC
#line 498 "parser.y"
                 {CurrentSemanticValue.methodModifier= MethodModifier.Static;}
#line default
        break;
      case 188: // FormalParameterList -> FormalParameters, ',', LastFormalParameter
#line 522 "parser.y"
                                              { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-3].stmts; }
#line default
        break;
      case 189: // FormalParameterList -> LastFormalParameter
#line 523 "parser.y"
                                { CurrentSemanticValue.stmts = new List<Statement>(); CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 190: // FormalParameterList -> /* empty */
#line 524 "parser.y"
                          { CurrentSemanticValue.stmts = new List<Statement>(); }
#line default
        break;
      case 192: // LastFormalParameter -> FormalParameter
#line 529 "parser.y"
                             {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 193: // FormalParameters -> FormalParameters, FormalParameter
#line 533 "parser.y"
                                        {CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts;ValueStack[ValueStack.Depth-2].stmts.Add(ValueStack[ValueStack.Depth-1].stmt);}
#line default
        break;
      case 194: // FormalParameters -> /* empty */
#line 534 "parser.y"
                          {CurrentSemanticValue.stmts = new List<Statement>();}
#line default
        break;
      case 195: // FormalParameter -> VariableModifiers, UnannType, VariableDeclaratorId
#line 537 "parser.y"
                                                    {CurrentSemanticValue.stmt = new FormalParameterDeclarationStatement(ValueStack[ValueStack.Depth-2].t,ValueStack[ValueStack.Depth-1].e);}
#line default
        break;
      case 199: // UnannArrayType -> UnannClassOrInterfaceType, Dims
#line 550 "parser.y"
                                       {CurrentSemanticValue.t = new UnannArrayType(ValueStack[ValueStack.Depth-2].t, null);}
#line default
        break;
      case 200: // UnannClassOrInterfaceType -> UnannClassType
#line 554 "parser.y"
                           {CurrentSemanticValue.t = ValueStack[ValueStack.Depth-1].t;}
#line default
        break;
      case 201: // UnannClassType -> Identifier, TypeArguments
#line 558 "parser.y"
                                  {CurrentSemanticValue.t = new NamedType(ValueStack[ValueStack.Depth-2].name);}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 574 "parser.y"

public Node RootNode { get; set; }

public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
