// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-VKITI27
// DateTime: 3/21/2017 6:36:05 PM
// UserName: Juan Camilo
// Input file <parser.y - 3/21/2017 6:36:03 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GPLexTutorial
{
public enum Tokens {
    error=127,EOF=128,NUMBER=129,IDENT=130,FLOATLITERAL=131,STRINGLITERAL=132,
    BOOL=133,ABSTRACT=134,ASSERT=135,BOOLEAN=136,BREAK=137,BYTE=138,
    CASE=139,CATCH=140,CHAR=141,CLASS=142,CONST=143,CONTINUE=144,
    DEFAULT=145,DO=146,DOUBLE=147,ELSE=148,ENUM=149,EXTENDS=150,
    FINAL=151,FINALLY=152,FLOAT=153,FOR=154,IF=155,GOTO=156,
    IMPLEMENTS=157,IMPORT=158,INSTANCEOF=159,INT=160,INTERFACE=161,LONG=162,
    NATIVE=163,NEW=164,PACKAGE=165,PRIVATE=166,PROTECTED=167,PUBLIC=168,
    RETURN=169,SHORT=170,STATIC=171,STRICTFP=172,SUPER=173,SWITCH=174,
    SYNCHRONIZED=175,THIS=176,THROW=177,THROWS=178,TRANSIENT=179,TRY=180,
    VOID=181,VOLATILE=182,WHILE=183,IntegerLiteral=184,CharacterLiteral=185,NULL=186,
    OPERATOR=187,TRUE=188,FALSE=189,EndOfLineComment=190,TraditionalComment=191};

public struct ValueType
#line 4 "parser.y"
{
    public int num;
    public string name;
    public float floatValue;
    public string stringValue;
    public bool boolValue;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[45];
  private static State[] states = new State[56];
  private static string[] nonTerms = new string[] {
      "CompilationUnit", "$accept", "ImportDeclarations", "TypeDeclarations", 
      "ImportDeclaration", "SingleTypeImportDeclaration", "TypeDeclaration", 
      "ClassDeclaration", "InterfaceDeclaration", "NormalClassDeclaration", "EnumDeclaration", 
      "ClassModifiers", "ClassBody", "ClassModifier", "Superinderfaces", "EnumBody", 
      "InterfaceModifiers", "TypeParameters", "ExtendsInterfaces", "InterfaceBody", 
      "InterfaceModifier", "TypeName", "PackageOrTypeName", };

  static Parser() {
    states[0] = new State(new int[]{158,49,168,-5,167,-5,166,-5,134,-5,171,-5,151,-5,142,-5,149,-5,161,-5,128,-5},new int[]{-1,1,-3,3,-5,46,-6,48});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{168,27,167,28,166,29,134,30,171,31,151,26,142,-17,149,-17,161,-34,128,-9},new int[]{-4,4,-7,5,-8,7,-10,8,-12,9,-14,19,-11,32,-9,33,-17,34,-21,39});
    states[4] = new State(-2);
    states[5] = new State(new int[]{168,27,167,28,166,29,134,30,171,31,151,26,128,-7,142,-17,149,-17,161,-34},new int[]{-4,6,-7,5,-8,7,-10,8,-12,9,-14,19,-11,32,-9,33,-17,34,-21,39});
    states[6] = new State(-8);
    states[7] = new State(-10);
    states[8] = new State(-12);
    states[9] = new State(new int[]{142,10,149,15});
    states[10] = new State(new int[]{130,11});
    states[11] = new State(new int[]{123,12});
    states[12] = new State(-24,new int[]{-13,13});
    states[13] = new State(new int[]{125,14});
    states[14] = new State(-14);
    states[15] = new State(new int[]{130,16});
    states[16] = new State(-26,new int[]{-15,17});
    states[17] = new State(-27,new int[]{-16,18});
    states[18] = new State(-25);
    states[19] = new State(new int[]{168,21,167,22,166,23,134,24,171,25,151,26,142,-15,149,-15},new int[]{-12,20,-14,19});
    states[20] = new State(-16);
    states[21] = new State(-18);
    states[22] = new State(-19);
    states[23] = new State(-20);
    states[24] = new State(-21);
    states[25] = new State(-22);
    states[26] = new State(-23);
    states[27] = new State(new int[]{168,-18,167,-18,166,-18,134,-18,171,-18,151,-18,142,-18,149,-18,161,-35});
    states[28] = new State(new int[]{168,-19,167,-19,166,-19,134,-19,171,-19,151,-19,142,-19,149,-19,161,-36});
    states[29] = new State(new int[]{168,-20,167,-20,166,-20,134,-20,171,-20,151,-20,142,-20,149,-20,161,-37});
    states[30] = new State(new int[]{168,-21,167,-21,166,-21,134,-21,171,-21,151,-21,142,-21,149,-21,161,-38});
    states[31] = new State(new int[]{168,-22,167,-22,166,-22,134,-22,171,-22,151,-22,142,-22,149,-22,161,-39});
    states[32] = new State(-13);
    states[33] = new State(-11);
    states[34] = new State(new int[]{161,35});
    states[35] = new State(-29,new int[]{-18,36});
    states[36] = new State(-30,new int[]{-19,37});
    states[37] = new State(-31,new int[]{-20,38});
    states[38] = new State(-28);
    states[39] = new State(new int[]{168,41,167,42,166,43,134,44,171,45,161,-32},new int[]{-17,40,-21,39});
    states[40] = new State(-33);
    states[41] = new State(-35);
    states[42] = new State(-36);
    states[43] = new State(-37);
    states[44] = new State(-38);
    states[45] = new State(-39);
    states[46] = new State(new int[]{158,49,168,-3,167,-3,166,-3,134,-3,171,-3,151,-3,142,-3,149,-3,161,-3,128,-3},new int[]{-3,47,-5,46,-6,48});
    states[47] = new State(-4);
    states[48] = new State(-6);
    states[49] = new State(new int[]{130,52},new int[]{-22,50,-23,53});
    states[50] = new State(new int[]{59,51});
    states[51] = new State(-40);
    states[52] = new State(new int[]{59,-41,46,-43});
    states[53] = new State(new int[]{46,54});
    states[54] = new State(new int[]{130,55});
    states[55] = new State(new int[]{59,-42,46,-44});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,128});
    rules[2] = new Rule(-1, new int[]{-3,-4});
    rules[3] = new Rule(-3, new int[]{-5});
    rules[4] = new Rule(-3, new int[]{-5,-3});
    rules[5] = new Rule(-3, new int[]{});
    rules[6] = new Rule(-5, new int[]{-6});
    rules[7] = new Rule(-4, new int[]{-7});
    rules[8] = new Rule(-4, new int[]{-7,-4});
    rules[9] = new Rule(-4, new int[]{});
    rules[10] = new Rule(-7, new int[]{-8});
    rules[11] = new Rule(-7, new int[]{-9});
    rules[12] = new Rule(-8, new int[]{-10});
    rules[13] = new Rule(-8, new int[]{-11});
    rules[14] = new Rule(-10, new int[]{-12,142,130,123,-13,125});
    rules[15] = new Rule(-12, new int[]{-14});
    rules[16] = new Rule(-12, new int[]{-14,-12});
    rules[17] = new Rule(-12, new int[]{});
    rules[18] = new Rule(-14, new int[]{168});
    rules[19] = new Rule(-14, new int[]{167});
    rules[20] = new Rule(-14, new int[]{166});
    rules[21] = new Rule(-14, new int[]{134});
    rules[22] = new Rule(-14, new int[]{171});
    rules[23] = new Rule(-14, new int[]{151});
    rules[24] = new Rule(-13, new int[]{});
    rules[25] = new Rule(-11, new int[]{-12,149,130,-15,-16});
    rules[26] = new Rule(-15, new int[]{});
    rules[27] = new Rule(-16, new int[]{});
    rules[28] = new Rule(-9, new int[]{-17,161,-18,-19,-20});
    rules[29] = new Rule(-18, new int[]{});
    rules[30] = new Rule(-19, new int[]{});
    rules[31] = new Rule(-20, new int[]{});
    rules[32] = new Rule(-17, new int[]{-21});
    rules[33] = new Rule(-17, new int[]{-21,-17});
    rules[34] = new Rule(-17, new int[]{});
    rules[35] = new Rule(-21, new int[]{168});
    rules[36] = new Rule(-21, new int[]{167});
    rules[37] = new Rule(-21, new int[]{166});
    rules[38] = new Rule(-21, new int[]{134});
    rules[39] = new Rule(-21, new int[]{171});
    rules[40] = new Rule(-6, new int[]{158,-22,59});
    rules[41] = new Rule(-22, new int[]{130});
    rules[42] = new Rule(-22, new int[]{-23,46,130});
    rules[43] = new Rule(-23, new int[]{130});
    rules[44] = new Rule(-23, new int[]{-23,46,130});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 117 "parser.y"

public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
